generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id             BigInt          @id @default(autoincrement())
  fullName       String
  email          String          @unique
  phone          String?         @unique
  passwordHash   String
  googleId       String?
  biometricHash  String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  paymentMethods PaymentMethod[]
  bookings       Booking[]
  promoUsages    PromoUsage[]
  notifications  Notification[]
  preferences    UserPreference?
}

model PaymentMethod {
  id             BigInt   @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         BigInt
  cardNumber     String?
  cardHolder     String?
  expiryDate     DateTime?
  cvv            String?
  walletProvider String?
  khqrCode       String?
}

model BusRoute {
  id        BigInt @id @default(autoincrement())
  origin    String
  destination String
  distanceKm Float?
  durationMinutes Int?
  buses     Bus[]
}

model Bus {
  id          BigInt @id @default(autoincrement())
  route       BusRoute @relation(fields: [routeId], references: [id], onDelete: Cascade)
  routeId     BigInt
  busNumber   String   @unique
  busType     BusType
  totalSeats  Int
  operatorName String?
  schedules   BusSchedule[]
  seats       Seat[]
  layout      BusLayout?
}

model BusSchedule {
  id           BigInt @id @default(autoincrement())
  bus          Bus @relation(fields: [busId], references: [id], onDelete: Cascade)
  busId        BigInt
  departureTime DateTime?
  arrivalTime   DateTime?
  price        Float?
  bookings     Booking[]
}

model BusLayout {
  id      BigInt @id @default(autoincrement())
  bus     Bus @relation(fields: [busId], references: [id], onDelete: Cascade)
  busId   BigInt @unique
  layout  Json
  createdAt DateTime @default(now())
}

model Seat {
  id            BigInt @id @default(autoincrement())
  bus           Bus @relation(fields: [busId], references: [id], onDelete: Cascade)
  busId         BigInt
  seatNumber    String?
  seatType      SeatType
  price         Float?
  rowNumber     Int?
  colNumber     Int?
  positionLabel String?
  bookingSeats  BookingSeat[]
}

model Booking {
  id            BigInt @id @default(autoincrement())
  user          User @relation(fields: [userId], references: [id])
  userId        BigInt
  schedule      BusSchedule @relation(fields: [scheduleId], references: [id])
  scheduleId    BigInt
  bookingStatus BookingStatus @default(PENDING)
  totalAmount   Float?
  promo         PromoCode? @relation(fields: [promoId], references: [id])
  promoId       BigInt?
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime @default(now())
  bookingSeats  BookingSeat[]
  payments      Payment[]
  tickets       Ticket[]
  promoUsages   PromoUsage[]
}

model BookingSeat {
  id                BigInt @id @default(autoincrement())
  booking           Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId         BigInt
  seat              Seat @relation(fields: [seatId], references: [id], onDelete: Cascade)
  seatId            BigInt
  passengerName     String?
  passengerAge      Int?
  passengerGender   Gender?
  passengerIdNumber String?
}

model Payment {
  id          BigInt @id @default(autoincrement())
  booking     Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId   BigInt
  amount      Float?
  method      PaymentMethodType
  transactionId String?
  status      PaymentStatus @default(PENDING)
  paidAt      DateTime?
}

model PromoCode {
  id           BigInt @id @default(autoincrement())
  code         String @unique
  description  String?
  discountType DiscountType
  discountValue Float
  maxUses      Int?
  usedCount    Int @default(0)
  validFrom    DateTime?
  validTo      DateTime?
  status       PromoStatus @default(ACTIVE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  promoUsages  PromoUsage[]
  bookings     Booking[]
}

model PromoUsage {
  id        BigInt @id @default(autoincrement())
  promo     PromoCode @relation(fields: [promoId], references: [id])
  promoId   BigInt
  user      User @relation(fields: [userId], references: [id])
  userId    BigInt
  booking   Booking @relation(fields: [bookingId], references: [id])
  bookingId BigInt
  usedAt    DateTime @default(now())
}

model Ticket {
  id        BigInt @id @default(autoincrement())
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId BigInt
  qrCode    String?
  issuedAt  DateTime @default(now())
}

model Notification {
  id        BigInt @id @default(autoincrement())
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    BigInt
  type      NotificationType
  message   String?
  isRead    Boolean @default(false)
  createdAt DateTime @default(now())
}

model UserPreference {
  id        BigInt @id @default(autoincrement())
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    BigInt @unique
  theme     Theme @default(LIGHT)
}

enum BusType {
  AC
  NON_AC
  SLEEPER
  SEATER
}

enum SeatType {
  NORMAL
  VIP
  SLEEPER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum PaymentMethodType {
  CREDITCARD
  DEBITCARD
  WALLET
  KHQR
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum PromoStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum NotificationType {
  BOOKING_CONFIRMATION
  PAYMENT_SUCCESS
  BUS_REMINDER
  CANCELLATION
}

enum Theme {
  LIGHT
  DARK
}
