generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  fullName       String
  email          String          @unique
  phone          String?         @unique
  image          String?
  passwordHash   String
  googleId       String?        @unique
  biometricHash  String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  bookings       Booking[]
  notifications  Notification[]
  paymentMethods PaymentMethod[]
  promoUsages    PromoUsage[]
  preferences    UserPreference?
}

model PaymentMethod {
  id             Int    @id @default(autoincrement())
  userId         Int
  cardNumber     String?
  cardHolder     String?
  expiryDate     DateTime?
  cvv            String?
  walletProvider String?
  khqrCode       String?
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BusRoute {
  id              Int @id @default(autoincrement())
  origin          String
  destination     String
  distanceKm      Float?
  durationMinutes Int?
  buses           Bus[]
}

model Bus {
  id           Int        @id @default(autoincrement())
  routeId      Int
  busNumber    String        @unique
  busType      BusType
  totalSeats   Int
  operatorName String?
  route        BusRoute      @relation(fields: [routeId], references: [id], onDelete: Cascade)
  layout       BusLayout?
  schedules    BusSchedule[]
  seats        Seat[]
}

model BusSchedule {
  id            Int    @id @default(autoincrement())
  busId         Int
  departureTime DateTime?
  arrivalTime   DateTime?
  price         Float?
  bookings      Booking[]
  bus           Bus       @relation(fields: [busId], references: [id], onDelete: Cascade)
}

model BusLayout {
  id        Int   @id @default(autoincrement())
  busId     Int   @unique
  layout    Json
  createdAt DateTime @default(now())
  bus       Bus      @relation(fields: [busId], references: [id], onDelete: Cascade)
}

model Seat {
  id            Int        @id @default(autoincrement())
  busId         Int
  seatNumber    String?
  seatType      SeatType
  price         Float?
  rowNumber     Int?
  colNumber     Int?
  positionLabel String?
   status        SeatStatus @default(AVAILABLE)
  bookingSeats  BookingSeat[]
  bus           Bus           @relation(fields: [busId], references: [id], onDelete: Cascade)
}

model Booking {
  id            Int        @id @default(autoincrement())
  userId        Int
  scheduleId    Int
  bookingStatus BookingStatus @default(PENDING)
  totalAmount   Float?
  promoId       Int?
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  promo         PromoCode?    @relation(fields: [promoId], references: [id])
  schedule      BusSchedule   @relation(fields: [scheduleId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
  bookingSeats  BookingSeat[]
  payments      Payment[]
  promoUsages   PromoUsage[]
  tickets       Ticket[]
}

model BookingSeat {
  id                Int  @id @default(autoincrement())
  bookingId         Int
  seatId            Int
  passengerName     String?
  passengerAge      Int?
  passengerGender   Gender?
  passengerIdNumber String?
  booking           Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  seat              Seat    @relation(fields: [seatId], references: [id], onDelete: Cascade)
}

model Payment {
  id            Int            @id @default(autoincrement())
  bookingId     Int
  amount        Float?
  method        PaymentMethodType
  transactionId String?
  status        PaymentStatus     @default(PENDING)
  paidAt        DateTime?
  booking       Booking           @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model PromoCode {
  id            Int       @id @default(autoincrement())
  code          String       @unique
  description   String?
  discountType  DiscountType
  discountValue Float
  maxUses       Int?
  usedCount     Int          @default(0)
  validFrom     DateTime?
  validTo       DateTime?
  status        PromoStatus  @default(ACTIVE)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  bookings      Booking[]
  promoUsages   PromoUsage[]
}

model PromoUsage {
  id        Int    @id @default(autoincrement())
  promoId   Int
  userId    Int
  bookingId Int
  usedAt    DateTime  @default(now())
  booking   Booking   @relation(fields: [bookingId], references: [id])
  promo     PromoCode @relation(fields: [promoId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Ticket {
  id        Int   @id @default(autoincrement())
  bookingId Int
  qrCode    String?
  issuedAt  DateTime @default(now())
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model Notification {
  id        Int           @id @default(autoincrement())
  userId    Int
  type      NotificationType
  message   String?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPreference {
  id     Int @id @default(autoincrement())
  userId Int @unique
  theme  Theme  @default(LIGHT)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum BusType {
  AC
  NON_AC
  SLEEPER
  SEATER
}

enum SeatType {
  NORMAL
  VIP
  SLEEPER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum PaymentMethodType {
  CREDITCARD
  DEBITCARD
  WALLET
  KHQR
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum PromoStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum NotificationType {
  BOOKING_CONFIRMATION
  PAYMENT_SUCCESS
  BUS_REMINDER
  CANCELLATION
}

enum Theme {
  LIGHT
  DARK
}

enum SeatStatus {
  AVAILABLE
  BOOKED
}